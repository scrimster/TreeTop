import Foundation
import UIKit
import Vision
import CoreML

/// Helper for running the `imageseg_canopy_model` segmentation model and
/// returning canopy cover percentage for a given image.
struct CanopyCoverAnalyzer {
    private let visionModel: VNCoreMLModel

    init?() {
        // Attempt to load the compiled model generated by Xcode from the
        // imageseg_canopy_model.mlpackage file.
        guard let mlModel = try? imageseg_canopy_model(configuration: MLModelConfiguration()).model,
              let vnModel = try? VNCoreMLModel(for: mlModel) else {
            return nil
        }
        self.visionModel = vnModel
    }

    /// Returns the estimated percentage of canopy cover for the provided image.
    func canopyCoverPercentage(for image: UIImage) async throws -> Double {
        guard let cgImage = image.cgImage else { return 0 }

        let request = VNCoreMLRequest(model: visionModel)
        let handler = VNImageRequestHandler(cgImage: cgImage, options: [:])
        try handler.perform([request])

        guard let pixelObservation = request.results?.first as? VNPixelBufferObservation else {
            return 0
        }

        return computeCoverage(from: pixelObservation.pixelBuffer)
    }

    /// Computes the ratio of canopy pixels to total pixels in the segmentation mask.
    private func computeCoverage(from mask: CVPixelBuffer) -> Double {
        CVPixelBufferLockBaseAddress(mask, .readOnly)
        defer { CVPixelBufferUnlockBaseAddress(mask, .readOnly) }

        let width = CVPixelBufferGetWidth(mask)
        let height = CVPixelBufferGetHeight(mask)
        let bytesPerRow = CVPixelBufferGetBytesPerRow(mask)
        guard let base = CVPixelBufferGetBaseAddress(mask) else { return 0 }
        let buffer = base.assumingMemoryBound(to: UInt8.self)

        var canopyPixels = 0
        for y in 0..<height {
            let row = buffer + y * bytesPerRow
            for x in 0..<width {
                // Assuming the model outputs 255 for canopy and 0 otherwise.
                if row[x] > 127 { canopyPixels += 1 }
            }
        }
        let totalPixels = width * height
        return Double(canopyPixels) / Double(totalPixels) * 100.0
    }
}
